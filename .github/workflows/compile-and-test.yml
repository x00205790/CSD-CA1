name: compile-and-test

env:
  AZ_WEBAPP_NAME: cd-bpcalculator
  AZ_WEBAPP_PACKAGE_PATH: 'bp/publish'

on:
  workflow_dispatch:

jobs:
  build_test:
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Build Application
      run: dotnet build bp/BPCalculator --configuration Release

    - name: unit tests
      run: |
        dotnet test bp/testing/unitTestProj.csproj --configuration Release --logger "trx;LogFileName=test-results.trx" || true
        dotnet test bp/testing/unitTestProj.csproj /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover --verbosity normal

    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: bp/testing/TestResults/coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: 39415c64e57c913926b4a9c23b7bd3a9
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       

    - name: Publish Code Coverage
      uses: b3b00/coverlet-action@1.2.8
      with:
        testProject: 'bp/testing/unitTestProj.csproj'
        output: 'lcov.info'
        outputFormat: 'lcov'
        excludes: '[program]*,[test]test.*'
    
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
        name: DotNet Tests                  
        path: '/home/runner/work/CSD-CA1/CSD-CA1/bp/testing/TestResults/test-results.trx'
        reporter: 'dotnet-trx'  

  docker_build_push:
    name: 'Docker Build and Push to ACR'
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && contains(github.event.head_commit.message, 'production') && 'production' || 'staging' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Build Application
      run: dotnet build bp/BPCalculator --configuration Release

    - name: Publish
      run: dotnet publish bp/BPCalculator/BPCalculator.csproj -c Release -o '${{ env.AZ_WEBAPP_PACKAGE_PATH }}/myapp'

###### Be aware that the following plugin requires the use of the admin user and does not support service principals
    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR }}
        username: ${{ secrets.ACR_USER }}
        password: ${{ secrets.ACR_SECRET }}
    - run: |
          docker build . -t ${{ secrets.ACR }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          docker push ${{ secrets.ACR }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}

  terraform:
    name: Plan / Apply
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && contains(github.event.head_commit.message, 'production') && 'production' || 'staging' }}
    needs: docker_build_push
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_rg: ${{ secrets.RG }}
      TF_VAR_STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      TF_VAR_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      TF_VAR_tenant: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_acr_user: ${{ secrets.ACR_USER }}
      TF_VAR_acr_pass: ${{ secrets.ACR_SECRET }}
      TF_VAR_acr_image: ${{ secrets.ACR }}/${{ secrets.CONTAINER_NAME }}:${{ github.sha }}
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Use Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: false
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      continue-on-error: false
