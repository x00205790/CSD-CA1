name: BP_compile_and_test

env:
  AZ_WEBAPP_NAME: cd-bpcalculator
  AZ_WEBAPP_PACKAGE_PATH: 'publish'

on:
  push:
    branches:
      - main
      - staging
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Build Application
      run: dotnet build bp/BPCalculator --configuration Release

    - name: unit tests
      run: |
        dotnet test bp/testing/unitTestProj.csproj --configuration Release --logger "trx;LogFileName=test-results.trx" || true
        dotnet test bp/testing/unitTestProj.csproj /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover --verbosity normal

    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: bp/testing/TestResults/coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: 39415c64e57c913926b4a9c23b7bd3a9
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       

    - name: Publish Code Coverage
      uses: b3b00/coverlet-action@1.2.7
      with:
        testProject: 'bp/testing/unitTestProj.csproj'
        output: 'lcov.info'
        outputFormat: 'lcov'
        excludes: '[program]*,[test]test.*'
    
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
        name: DotNet Tests                  
        path: '/home/runner/work/CSD-CA1/CSD-CA1/bp/testing/TestResults/test-results.trx'
        reporter: 'dotnet-trx'  

    - name: Prep for Snyk
      run: |
        cd bp/BPCalculator/   
        dotnet new sln --force
        dotnet sln add BPCalculator.csproj
    #    sudo apt update
    #    sudo apt install nodejs npm
    #    npm install snyk -g
    
    #- name: Run Snyk to check for vulnerabilities
    #  continue-on-error: true
    #  run: |
    #    cd bp/BPCalculator/ 
    #    snyk auth ${{ secrets.SNYK_TOKEN }}
    #    snyk test --sarif-file-output=snyk.sarif --severity-threshold=medium
    #    ls -la

    - name: Restore dependencies
      run: dotnet restore bp/BPCalculator/BPCalculator.sln
     
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      continue-on-error: true # To make sure that SARIF upload gets called
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif --file=bp/BPCalculator/BPCalculator.sln

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif

    - name: Publish
      run: dotnet publish bp/BPCalculator/BPCalculator.csproj -c Release -o '${{ env.AZ_WEBAPP_PACKAGE_PATH }}/myapp'

